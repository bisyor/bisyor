<?php

namespace backend\models\mail;

use backend\models\bills\Bills;
use backend\models\items\Applications;
use backend\models\items\Items;
use backend\models\references\Subscribers;
use backend\models\users\Users;
use Yii;
use yii\db\Expression;
use yii\helpers\Html;

/**
 * This is the model class for table "sendmail_massend".
 *
 * @property int $id
 * @property string|null $from От
 * @property string|null $name ФИО
 * @property string|null $title Тема
 * @property int|null $status Статус
 * @property int|null $service_id
 * @property string|null $text Сообщение
 * @property bool|null $to_phone Отправить на телефон
 * @property int|null $shop_only Только для пользователей магазинов
 * @property int|null $template_id Шаблон
 * @property string|null $date_cr Дата создание
 * @property string|null $date_up Дата изменение
 *
 * @property SendmailTemplate $template
 */
class SendmailMassend extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    const NEW_USERS = 1;
    const ACTIV_VERIFY_USERS = 2;
    const NO_VERIFY_USERS = 3;
    const PAYMENT_USERS = 4;
    const NO_PAYMENT_USERS = 5;
    const ADD_ITEMS_USERS = 6;
    const NO_ITEMS_USERS = 7;
    const SHOPS_USERS = 8;
    const ALL_USERS = 9;
    const OUR_USERS = 10;
    const OUR_ORDER_USERS = 11;

    public static function tableName()
    {
        return 'sendmail_massend';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['status', 'template_id'], 'default', 'value' => null],
            [['status', 'template_id', 'shop_only', 'service_id'], 'integer'],
            [['text'], 'string'],
            [['text', 'shop_only', 'to_phone'], 'required'],
            [['to_phone'], 'boolean'],
            [['date_cr', 'date_up'], 'safe'],
            [['from', 'name', 'title'], 'string', 'max' => 255],
            [['template_id'], 'exist', 'skipOnError' => true, 'targetClass' => SendmailTemplate::className(), 'targetAttribute' => ['template_id' => 'id']],
            ['title', 'required', 'when' => function($model) {return $model->to_phone == 0;}, 'enableClientValidation' => false],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'from' => 'Получателей',
            'name' => 'Отправлено',
            'title' => 'Тема',
            'status' => 'Статус',
            'text' => 'Сообщение',
            'to_phone' => 'Отправить',
            'shop_only' => 'Только для пользователей магазинов',
            'template_id' => 'Шаблон',
            'date_cr' => 'Начало',
            'date_up' => 'Дата изменение',
            'service_id' => 'Service id',


        ];
    }

    /**
     * Gets query for [[Template]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getTemplate()
    {
        return $this->hasOne(SendmailTemplate::className(), ['id' => 'template_id']);
    }
    /**
     * Gets query for [[SendmailUser]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getSendmailUser()
    {
        return $this->hasOne(SendmailMassendUser::className(), ['id' => 'massend_id']);
    }


    /**
     * @param bool $insert
     * @return bool
     */
    public function beforeSave($insert)
    {
        if($insert){
            if($this->isNewRecord){
                $this->date_cr = date("Y-m-d H:i:s");
            }else{
                $this->date_up = date("Y-m-d H:i:s");
            }
            if($this->template_id){
                $text = str_replace('{subject}', $this->title, $this->template->content);
                $this->text = str_replace('{message}', $this->text, $text);
            }
            if($this->to_phone){
                $this->text = str_replace('{unsubscribe}', 'Bisyor.uz', $this->text);
            }else{
                $this->text = str_replace('{unsubscribe}', '<a href="https://www.bisyor.uz">Bisyor.uz</a>', $this->text);
            }
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }


    /**
     * @param bool $insert
     * @param array $changedAttributes
     */
    public function afterSave($insert, $changedAttributes)
    {   
        $where = ($this->to_phone == true) ? ['not' ,['users.phone' => null]] : ['not' ,['users.email' => null]];
        switch ($this->shop_only){
            case self::NEW_USERS :
                $users = Users::find()
                    ->andWhere(['>=', 'registry_date', date("Y-m-d", strtotime("-1 month", time()))])
                    ->andWhere($where)
                    ->asArray()
                    ->all();
                break;
            case self::ACTIV_VERIFY_USERS :
                $users = Users::find()
                    ->andWhere(['phone_verified' => true])
                    ->andWhere($where)
                    ->asArray()
                    ->all();
                break;
            case self::NO_VERIFY_USERS :
                $users = Users::find()
                    ->andWhere(['phone_verified' => false])
                    ->andWhere($where)
                    ->asArray()
                    ->all();
                break;

            case self::PAYMENT_USERS :
                $users = Users::find()
                    ->joinWith('bills')
                    ->andWhere(['bills.status' => Bills::STATUS_ZAVERSHEN])
                    ->andWhere(['bills.psystem' => Bills::PY_SYSTEMS_LIST])
                    ->andWhere($where)
                    ->asArray()
                    ->all();
                break;

            case self::NO_PAYMENT_USERS :
                $bills = Bills::find()->select(['user_id'])
                    ->asArray()
                    ->all();
                $bills = array_column($bills,'user_id');
                $users = Users::find()
                    ->andWhere($where)
                    ->andWhere(['!=' ,'id', $bills])
                    ->asArray()
                    ->all();
                break;

            case self::ADD_ITEMS_USERS :
                $users = Users::find()
                    ->innerJoin('items', 'users.id = items.user_id')
                    ->asArray()
                    ->andWhere($where)
                    ->all();
                break;
            case self::NO_ITEMS_USERS:
                $items  = Items::find()->select(['user_id'])
                    ->asArray()
                    ->all();
                $items = array_column($items,'user_id');
                $users = Users::find()
                    ->asArray()
                    ->andWhere($where)
                    ->andWhere(['!=' ,'id', $items])
                    ->all();
                break;
            case self::SHOPS_USERS :
                $users = Users::find()
                    ->innerJoin('shops', 'users.id = shops.user_id')
                    ->asArray()
                    ->andWhere($where)
                    ->all();
                break;
            case self::OUR_USERS :
                $users = Users::find()
                    ->andWhere(['id' => [173 , 1198,1649 ,16444]])
                    ->andWhere($where)
                    ->asArray()
                    ->all();
                break;
            case self::OUR_ORDER_USERS :
                $orders = Applications::find()
                ->asArray()
                    ->all();

                    $temp = array_unique(array_column($orders, 'phone'));
                    $orders = array_intersect_key($orders, $temp);
                break;
            default : $users = Users::find()->where($where)->asArray()->all();
        }
        $email = ($this->to_phone) ? 0:1;
        if(isset($users) && $users) {
            foreach ($users as $user) {
                $model = new SendmailMassendUser();
                $model->user_id = $user['id'];
                $model->to_phone = $this->to_phone;
                $model->to_email = $email;
                $model->service_id = $this->service_id;
                if ($user['fio']) $name = $user['fio'];
                elseif ($user['email']) $name = $user['email'];
                else $name = $user['login'];
                $model->massend_id = $this->id;
                $model->title = $this->title;
                $model->text = str_replace('{fio}', $name, $this->text);
                $model->status = 0;
                $model->date_cr = date('Y-m-d H:i');
                $model->save();
            }
        }
        if(isset($orders) && $orders){
            foreach ($orders as $value){
                $model = new SendmailMassendUser();
                $model->to_phone = true;
                $name = $value['fullname'];
                $model->massend_id = $this->id;
                $model->title = $this->title;
                $model->phone = $value['phone'];
                $model->text = str_replace('{fio}', $name, $this->text);
                $model->status = 0;
                $model->service_id = $this->service_id;
                $model->date_cr = date('Y-m-d H:i');
                $model->save();
            }
        }
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }


    /**
     * gmaildan mesage junatish
     * @param $array
     * @return bool
     */
    public function sendEmail($array)
    {
        return Yii::$app->mailer
            ->compose()
            ->setFrom(['bisyorrobot@gmail.com' => 'Bisyor.uz'])
            ->setTo($array)
            ->setSubject('Рассылка')
            ->setHtmlBody($this->text)->send();
    }


    /**
     * userlar listini olishda kerak
     * @return string[]
     */
    public static function getUsers(){
       return [
           self::NEW_USERS => 'Новые пользователи',
           self::ACTIV_VERIFY_USERS => 'Активные пользователи (Подтвердить)',
           self::NO_VERIFY_USERS => 'Неактивные пользователи (не подтвердить)',
           self::PAYMENT_USERS => 'Пользователи, пополнил счет',
           self::NO_PAYMENT_USERS => 'Пользователи, не пополнял счет',
           self::ADD_ITEMS_USERS => 'Пользователи, у которых есть объявление',
           self::NO_ITEMS_USERS => 'Пользователи, у которых нет объявление',
           self::SHOPS_USERS => 'Пользователи, у которых есть магазин',
           self::ALL_USERS => 'Все пользователи',
           self::OUR_USERS => 'Свои',
           self::OUR_ORDER_USERS => 'Покупатель',
       ];
   }


    /**
     * @return string
     */
    public  function getUsersDescription(){
        switch ($this->shop_only) {
            case self::NEW_USERS :
                return 'Новые участники';
                break;
            case self::ACTIV_VERIFY_USERS :
                return 'Активные пользователи (Подтвердить)';
                break;
            case self::NO_VERIFY_USERS :
                return 'Неактивные пользователи (не подтвердить)';
                break;
            case self::PAYMENT_USERS :
                return 'Пользователи, пополнил счет';
                break;
            case self::NO_PAYMENT_USERS :
                return 'Пользователи, не пополнял счет';
                break;
            case self::ADD_ITEMS_USERS :
                return 'Пользователи, у которых есть объявление';
                break;
            case self::NO_ITEMS_USERS :
                return 'Пользователи, у которых нет объявление';
                break;
            case self::SHOPS_USERS :
                return 'Участники, у которых есть магазин';
                break;
            case self::ALL_USERS :
                return 'Все участники';
                break;
            case self::OUR_USERS :
                return 'Свои';
                break;
            case self::OUR_ORDER_USERS :
                return 'Покупатель';
                break;
            default : return 'Неизвестно';
        }
    }
}
