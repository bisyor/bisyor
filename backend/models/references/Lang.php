<?php

namespace backend\models\references;
use backend\models\users\Users;
use Yii;
use common\modules\translations\models\SourceMessage;
use common\modules\translations\models\Message;

/**
 * This is the model class for table "lang".
 *
 * @property int $id
 * @property string $url Код языка
 * @property string $local Местное название
 * @property string $name Название
 * @property string $image Флаг
 * @property int $default Заметка
 * @property int $create Заметка
 * @property int $status Статус
 * @property int $date_update Дата изменения
 * @property int $date_create Дата создания
 */

class Lang extends \yii\db\ActiveRecord
{
    public $flag;

    /**
     * {@inheritdoc}
     */
    
    public static function tableName()
    {
        return 'lang';
    }

    /**
     * {@inheritdoc}
     */
    
    public function rules()
    {
        return [
            [['url', 'name'], 'required'],
            [['default', 'status', 'date_update', 'date_create'], 'integer'],
            [['url', 'local', 'name', 'image'], 'string', 'max' => 255],
            [['flag'], 'file', 'skipOnEmpty' => true, 'extensions' => 'png, jpg, jpeg',],
        ];
    }

    public function behaviors()
    {
        return [
            'timestamp' => [
                'class' => 'yii\behaviors\TimestampBehavior',
                'attributes' => [
                    \yii\db\ActiveRecord::EVENT_BEFORE_INSERT => ['date_create', 'date_update'],
                    \yii\db\ActiveRecord::EVENT_BEFORE_UPDATE => ['date_update'],
                ],
            ],
        ];
    }

    /**
     * {@inheritdoc}
     */
    
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'url' => 'Код языка',
            'local' => 'Местное название',
            'name' => 'Название',
            'image' => 'Флаг',
            'default' => 'Основной язык сайта?',
            'status' => 'Статус',
            'date_update' => 'Дата изменения',
            'date_create' => 'Дата создания',
            'flag' => 'Флаг',
        ];
    }


    /**
     * default tilni topish
     */
    public function defaultLang()
    {
        if($this->default == 1){
            $all_lang = Lang::find()->where(['!=', 'id', $this->id])->all();
            foreach ($all_lang as $value){
                $value->default = 0;
                $value->save();
            }
        }
    }


    /**
     * @return bool
     */
    public function beforeDelete()
    {
        $dir = '/web/uploads//flags/';
        $conn_id = Users::connectFtp();
        if($this->image != null){
            if(ftp_size($conn_id, $dir.$this->image) != -1){
                ftp_delete($conn_id, $dir . $this->image);
            }
        }
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }


    /**
     * @return mixed
     * @throws \Throwable
     */
    public static function getLanguages()
    {
        $rows = Lang::getDb()->cache(function ($db) {
            return Lang::find()->where(['status'=>1])->all();
        });
        return $rows;
    }

    /**
     * /Получение текущего объекта языка
     * @return array|Lang|\yii\db\ActiveRecord|null
     */
    static function getCurrent()
    {
       return Lang::find()->where(['url'=>Yii::$app->language])->one();
    }


    /**
     * @return string[]
     */
    public function getStatus()
    {
        return [
                '0' => 'Отключен',
                '1' => 'Активный',
            ];
    }


    /**
     * @return string
     */
    public function getStatusType(){
        switch ($this->status) {
            case 0: return "Отключен";
            case 1: return "Активный";
        }
    }


    /**
     * @return string
     */
    public function StatusName()
    {
        return ($this->status=='1')?'Активный':'Отключен';
    }


    /**
     * @return array
     */
    public static function getLanguagesForHeader()
    {
        $langs = Lang::find()->where(['status'=>1])->all();
        $result = [];
        foreach ($langs as $value) {
            $result [] = [
                'local' => $value->local,
                'url' => $value->url,
                'class' => $value->url == Yii::$app->language ? 'active' : '',
            ];
        }
        return $result;
    }


    /**
     * @return mixed
     */
    public static function getImageSiteName()
    {
        return Yii::$app->params['image_site'];
    }


    /**
     * @return string
     */
    public function getFlag()
    {
        if ($this->image == '') {
            $path = '/uploads/flags/noflag.png';
        } else {
            $path = self::getImageSiteName().'/web/uploads/flags/'.$this->image;
        }
        return $path;
    }


    /**
     * image upload qilish
     * @return bool
     * @throws \yii\db\Exception
     */
    public function upload()
    {
        if(!empty($this->flag))
        {   $dir = '/web/uploads/flags/';
            $conn_id = Users::connectFtp();
            if($this->image != null){
                if(ftp_size($conn_id, $dir.$this->image) != -1){
                    ftp_delete($conn_id, $dir . $this->image);
                }
            }
            $fileName = $this->id.$this->url.'.'.$this->flag->extension;
            $ftp_path = $dir.$fileName;
            $ret = ftp_nb_put($conn_id, $ftp_path, $this->flag->tempName, FTP_BINARY);
            while ($ret == FTP_MOREDATA) {
                $ret = ftp_nb_continue($conn_id);
            }
            if($ret != FTP_FINISHED){
                return true;
            }
            Yii::$app->db->createCommand()->update('lang', ['image' => $fileName], ['id' => $this->id])->execute();
        }
    }


    /**
     * fayldan tarjimalarni oqib bazaga insert qilish
     * @throws \yii\db\Exception
     */
    public static function setInsertFile()
    {
        Message::deleteAll();
        SourceMessage::deleteAll();

        $translations_oz = include 'uploads/langs/oz.php';
        $translations_uz = include 'uploads/langs/uz.php';
        $translations_ru = include 'uploads/langs/ru.php';
        $translations_en = include 'uploads/langs/en.php';

        $keys = array_keys($translations_oz);
        $array_oz = array_values($translations_oz);
        $array_uz = array_values($translations_uz);
        $array_ru = array_values($translations_ru);
        $array_en = array_values($translations_en);
        
        //  ***************** array keys ************************
        $key_array = []; 
        foreach ($keys as $key => $value) {
            $key_array [] = [
                'id' => ($key + 1),
                'category' => 'app',
                'message' => $value,
            ];
        }

          // ************** ozbekcha ***********************
        $langs_oz = [];
        foreach ($array_oz as $key => $value) {
            $langs_oz [] =  [
                'id' => ($key+1),
                'language' => 'oz',
                'translation' => $value,
            ];
        }


         // ************** uzbekcha ***********************
        $langs_uz = [];
        foreach ($array_uz as $key => $value) {
            $langs_uz [] =  [
                'id' => ($key+1),
                'language' => 'uz',
                'translation' => $value,
            ];
        }

          // ************** ruscha ***********************
        $langs_ru = [];
        foreach ($array_ru as $key => $value) {
            $langs_ru [] =  [
                'id' => ($key+1),
                'language' => 'ru',
                'translation' => $value,
            ];
        }

          // ************** english ***********************
        $langs_en = [];
        foreach ($array_en as $key => $value) {
            $langs_en [] =  [
                'id' => ($key+1),
                'language' => 'en',
                'translation' => $value,
            ];
        }

        Yii::$app->db->createCommand()->batchInsert(
        SourceMessage::tableName(), 
        ['id','category', 'message'], 
        $key_array
        )->execute();

        Yii::$app->db->createCommand()->batchInsert(
        Message::tableName(), 
        ['id','language' , 'translation'], 
        $langs_oz
        )->execute();

        Yii::$app->db->createCommand()->batchInsert(
        Message::tableName(), 
        ['id','language' , 'translation'], 
        $langs_uz
        )->execute();

        Yii::$app->db->createCommand()->batchInsert(
        Message::tableName(), 
        ['id','language' , 'translation'], 
        $langs_ru
        )->execute();

        Yii::$app->db->createCommand()->batchInsert(
        Message::tableName(), 
        ['id','language' , 'translation'], 
        $langs_en
        )->execute();
    }
    
}