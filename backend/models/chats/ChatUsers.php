<?php

namespace backend\models\chats;

use backend\models\items\Items;
use Yii;
use backend\models\users\Users;
use yii\data\Pagination;

/**
 * This is the model class for table "chat_users".
 *
 * @property int $id
 * @property int|null $chat_id Чат
 * @property int|null $user_id Пользователи
 * @property string|null $date_cr Дата создание
 * @property int|null $item_id Items
 *
 * @property Chats $chat
 * @property Users $user
 */
class ChatUsers extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'chat_users';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['chat_id', 'user_id','item_id'], 'integer'],
            [['date_cr'], 'safe'],
            [['chat_id'], 'exist', 'skipOnError' => true, 'targetClass' => Chats::className(), 'targetAttribute' => ['chat_id' => 'id']],
            [['user_id'], 'exist', 'skipOnError' => true, 'targetClass' => Users::className(), 'targetAttribute' => ['user_id' => 'id']],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'chat_id' => 'Чат',
            'user_id' => 'Пользователи',
            'date_cr' => 'Дата создание',
        ];
    }

    public function beforeSave($insert)
    {
        if ($this->isNewRecord)
        {
            $this->date_cr = date("Y-m-d H:i:s");
        }
        return parent::beforeSave($insert);
    }
    public function afterDelete()
    {
        $chat = Chats::findOne($this->chat_id);
        $chat->delete();
        parent::afterDelete(); // TODO: Change the autogenerated stub
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getChat()
    {
        return $this->hasOne(Chats::className(), ['id' => 'chat_id']);
    }


    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUser()
    {
        return $this->hasOne(Users::className(), ['id' => 'user_id']);
    }

    public function sendMessageAboutDeletingAds($text)
    {
        $chatMessage = new ChatMessage();
        $chatMessage->chat_id = $this->chat_id;
        $chatMessage->user_id = $this->user_id;
        $chatMessage->message = $text;
        $chatMessage->save(false);
    }

    public function getLastMessage()
    {
        return $this->hasOne(ChatMessage::className(), ['chat_id' => 'chat_id'])->orderBy(['chat_message.date_cr' => SORT_DESC]);
    }

    public function getLastCount()
    {
        return $this->hasMany(ChatMessage::className(), ['chat_id' => 'chat_id'])->where(['chat_message.is_read' => false])->select('chat_message.id');
    }

    public function getItems()
    {
        return $this->hasOne(Items::className(), ['id' => 'item_id']);
    }


    /**
     * userlar lisit
     * @param $query
     * @return array
     */
    public static function getUsersList($query)
    {
        $array = [];
        $countQuery = clone $query;
        $pagination = new Pagination([
            'defaultPageSize' => 15,
            'totalCount' => $countQuery->count(),
            'pageParam' => 'page',
        ]);
        $dataProvider = $query->offset($pagination->offset)->limit($pagination->limit)->all();
        foreach ($dataProvider as $value) {
            $array [] = [
                'to_user' => $value->user->getChatUsers(),
                'chat_id' => $value->chat->id,
                'message' => [
                    'last_message' =>$value->lastMessage != null ? mb_substr($value->lastMessage->message , 0, 45)  : null,
                    'date_cr' => $value->lastMessage != null ? date('H:i d.m.Y', strtotime($value->lastMessage->date_cr)) : null,
                    'count' => count($value->lastCount),
                ],
                'items' => [
                    'item_id' => $value->items != null  ? $value->items->id : null,
                    'item_title' => $value->items != null ? $value->items->title : null,
                    'item_image' =>  $value->items != null ? self::getImageM($value->items->img_m) : null,
                ],

            ];
        }
        return [
            'results' => $array,
            'pagination' =>$pagination,
        ];
    }


    /**
     * @param $img_m
     * @return string
     */
    public static function getImageM($img_m)
    {
        $siteName = Yii::$app->params['image_site'];
        $itemsPath = Yii::$app->params['itemsPath'];
        if($img_m == null || $img_m == '') return $siteName.'/web/uploads/noimg.jpg';
        else {
            if($img_m == 'def-m.png')return $siteName.'/web/uploads/noimg.jpg';
            else return $itemsPath .  $img_m;
        }
    }

}
